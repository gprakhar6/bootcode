ENTRY(__reset)
PAGE_SIZE  = 0x1000;
CODE_START = 0x1000;
STACK_SIZE = 0x4000;
SECTIONS
{
  /* code section */
  . = CODE_START;

      /*  layout section */
  LAYOUT_START = .;
  .layout : { *(.layout) }
  LAYOUT_SIZE = . - LAYOUT_START;
      /* end layout section*/
      
      /* user code section */
  USER_CODE_START = .;
  .text ALIGN(PAGE_SIZE): { obj/src/boot.o(.text) *(.text) *(.text).*}
  USER_CODE_SIZE = . - USER_CODE_START;
      /* end user code section*/
      /* rodata section */
  RODATA_START = .;
  .rodata ALIGN(PAGE_SIZE): {*(.rodata) *(.rodata.*)}
      /* end rodata section */
  RODATA_SIZE = . - RODATA_START;
  
  CODE_SIZE = . - CODE_START;
  /* end code section */

  /* data section */
  BSS_START = .;
  .bss ALIGN(PAGE_SIZE): { *(.bss)}
  BSS_SIZE = . - BSS_START;

  /*
  this has gdt, gdt must be in within address space of few kbs(not)
   sure how much. but .paging takes space, keep it after data segment
  */
  DATA_START = .;
  .data ALIGN(PAGE_SIZE) : { *(.data) }
  . = ALIGN(8); /* for some reason align it to 8 bytes */
  DATA_SIZE = . - DATA_START;
  
  .interrupt_table : {obj/src/boot.o(.interrupt_table)}
  .interrupt_descriptors : {obj/src/boot.o(.interrupt_descriptors)}  
  /* end data section  */

  PAGE_DS_START = .;
  .paging ALIGN(PAGE_SIZE): { obj/src/boot.o(paging) }
  PAGE_DS_SIZE = . - PAGE_DS_START;
  
  .stack ALIGN(PAGE_SIZE): {
    . += STACK_SIZE;
  }
  
  STACK_START = .;
  /DISCARD/ : { *(.eh_frame .comment) }
}